#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2017 CNRS and University of Strasbourg
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

'''
Command-line interface to check if the Cinder API is working.
'''

import sys

import argparse
import ConfigParser
import socket
import requests

from six.moves import urllib


def get_os_params(config_file):
    '''Return OpenStack parameters
    '''
    os_params = {'keystone': {}, 'cinder': {}}
    os_params = {'username': None, 'password': None,
                 'project_name': None, 'user_domain_name': None,
                 'project_domain_name': None, 'auth_uri': None,
                 'cacert': None}
    config_parser = ConfigParser.ConfigParser()
    config_parser.read(config_file)
    if (not config_parser.has_section('keystone_authtoken') or
            not config_parser.has_section('cinder')):
        return os_params
    for param in os_params.keys():
        if config_parser.has_option('keystone_authtoken', param):
            os_params[param] = config_parser.get('keystone_authtoken', param)
    return os_params


def get_conn_params(os_params):
    '''Return Keystone token and API's endpoint
    '''
    url = os_params['auth_uri'] + '/auth/tokens'
    token = None
    endpoint = None

    if not os_params['cacert']:
        ca_check = False
    else:
        ca_check = os_params['cacert']

    headers = {'Content-Type': 'application/json'}
    data = '''{
"auth": {
  "identity": {
    "methods": ["password"],
      "password": {
        "user": {
          "name": "%s",
          "domain": {"name": "%s"},
          "password": "%s"
        }
      }
    },
    "scope": {
      "project": {
        "name": "%s",
        "domain": { "name": "%s" }
      }
    }
  }
}''' % (os_params['username'], os_params['user_domain_name'],
        os_params['password'], os_params['project_name'],
        os_params['user_domain_name'])
    req = requests.post(url, data, headers=headers, verify=ca_check)
    if req.status_code == 201 and 'X-Subject-Token' in req.headers:
        token = req.headers['X-Subject-Token']
        res = req.json()
        for endpoints in res['token']['catalog']:
            if endpoints['name'] == 'cinder':
                for endpoint_iface in endpoints['endpoints']:
                    if endpoint_iface['interface'] == 'public':
                        endpoint = endpoint_iface['url']
                        break
                break

    return (token, endpoint)


def check_api(endpoint, token):
    '''Check the Cinder API

    :param endpoint:
    :param token:
    '''
    headers = {'Content-Type': 'application/json', 'X-Auth-Token': token}
    url = endpoint + '/volumes/detail'
    req = requests.get(url, headers=headers)
    exit_code = 2
    msg = 'CRITICAL - Failed to get the Cinder volume list'

    if req.status_code == 200:
        data = req.json()
        volume_count = len(data['volumes'])
        exit_code = 0
        msg = ("OK - Cinder API successfully tested: %i"
               " volumes are available." % volume_count)
    return (exit_code, msg)


def main():
    '''Main loop
    '''
    parser = argparse.ArgumentParser(description="Check Glance API.",
                                     version="0.1")
    parser.add_argument('config_file', metavar='CONFIG_FILE', type=str,
                        help=('Configuration file'))
    args = parser.parse_args()
    config_file = args.config_file

    os_params = get_os_params(config_file)
    try:
        # Check that the API is working
        token, endpoint = get_conn_params(os_params)

        if not token:
            print("CRITICAL - Failed to get token from Keystone"
                  " server: %s" % (auth_uri))
            sys.exit(2)

        if not endpoint:
            print("CRITICAL - Failed to get Cinder endpoint from keystone"
                  " server: %s" % (auth_uri))
            sys.exit(2)

        parsed_url = urllib.parse.urlparse(endpoint)
        cinder_host = parsed_url.hostname
        cinder_port = int(parsed_url.port)

        # Verify that the port is reachable
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        result = sock.connect_ex((cinder_host, cinder_port))
        if result != 0:
            print("CRITICAL - cannot connect to cinder server %s "
                  "on port %s" % (cinder_host, cinder_port))
            sys.exit(2)

        (exit_code, msg) = check_api(endpoint, token)
        print(msg)
        sys.exit(exit_code)

    except Exception as ex:  # pylint: disable=broad-except
        # All other exceptional conditions, we report as 'UNKNOWN' probe status
        print("UNKNOWN - Unexpected error while testing "
              "Cinder API: %s" % (str(ex)))
        sys.exit(3)

if __name__ == '__main__':
    main()
