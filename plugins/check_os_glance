#!/usr/bin/env python

# Copyright 2017-2019 CNRS and University of Strasbourg
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

"""
Command-line interface to check the Glance API.
"""

import os
import sys

import argparse
import ConfigParser
import socket
import requests

from six.moves import urllib

__version__ = "1.0"

STATE_OK = 0
STATE_WARNING = 1
STATE_CRITICAL = 2
STATE_UNKNOWN = 3


def get_os_params(config_file):
    '''Return OpenStack parameters
    '''
    os_params = {
        'username': None, 'password': None, 'project_name': None,
        'user_domain_name': None, 'project_domain_name': None,
        'auth_uri': None, 'cacert': None, 'insecure': False
    }
    config_parser = ConfigParser.ConfigParser()
    config_parser.read(config_file)
    if not config_parser.has_section('keystone_authtoken'):
        return None
    for param in os_params.keys():
        if config_parser.has_option('keystone_authtoken', param):
            os_params[param] = config_parser.get('keystone_authtoken', param)
    return os_params


def get_conn_params(os_params, cert=None):
    '''Return Keystone token and API's endpoint
    '''
    url = os_params['auth_uri'] + '/auth/tokens'
    token = None
    endpoint = None

    headers = {'Content-Type': 'application/json'}
    data = '''{
"auth": {
  "identity": {
    "methods": ["password"],
      "password": {
        "user": {
          "name": "%(username)s",
          "domain": {"name": "%(user_domain_name)s"},
          "password": "%(password)s"
        }
      }
    },
    "scope": {
      "project": {
        "name": "%(project_name)s",
        "domain": { "name": "%(user_domain_name)s" }
      }
    }
  }
}''' % (os_params)

    if cert is not None:
        req = requests.post(url, data, headers=headers, verify=cert)
    else:
        req = requests.post(url, data, headers=headers)
    if req.status_code == 201 and 'X-Subject-Token' in req.headers:
        token = req.headers['X-Subject-Token']
        res = req.json()
        for endpoints in res['token']['catalog']:
            if endpoints['name'] == 'glance':
                for endpoint_iface in endpoints['endpoints']:
                    if endpoint_iface['interface'] == 'public':
                        endpoint = endpoint_iface['url']
                        break
                break

    return (token, endpoint)


def check_api(endpoint, token, cert=None):
    '''Check the Glance API
    '''
    headers = {'Content-Type': 'application/json', 'X-Auth-Token': token}
    url = endpoint + '/v2/images'
    if cert is not None:
        req = requests.get(url, headers=headers, verify=cert)
    else:
        req = requests.get(url, headers=headers)
    exit_code = STATE_CRITICAL
    msg = "CRITICAL - Failed to get the Glance image list\n"

    if req.status_code == 200:
        data = req.json()
        image_count = len(data['images'])
        exit_code = STATE_OK
        msg = ("OK - Glance API successfully tested: %i"
               " images are available.\n" % image_count)
    return (exit_code, msg)


def main():
    '''Main loop
    '''
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-v', '--version', action='version',
                        version='%(prog)s  ' + __version__)
    parser.add_argument('config_file', metavar='CONFIG_FILE', type=str,
                        help=('Configuration file'))
    args = parser.parse_args()
    config_file = args.config_file

    os_params = get_os_params(config_file)
    if os_params is None:
        sys.stdout.write(
            "UNKNOWN - Unable to parse the probe "
            "configuration file\n"
        )
        sys.exit(STATE_UNKNOWN)

    if os_params['cacert'] is not None:
        if os_params['insecure']:
            cert = False
        else:
            if os.path.isfile(os_params['cacert']):
                cert = os_params['cacert']
            else:
                sys.stdout.write(
                    "UNKNOWN - No such CA Cert: %s\n" % (os_params['cacert'])
                )
                sys.exit(STATE_UNKNOWN)
    else:
        cert = None

    try:
        # Check that the API is working
        token, endpoint = get_conn_params(os_params, cert)

        if not token:
            sys.stdout.write(
                "CRITICAL - Failed to get token from Keystone "
                "endpoint: %s\n" % (os_params['auth_uri'])
            )
            sys.exit(STATE_CRITICAL)

        if not endpoint:
            sys.stdout.write(
                "CRITICAL - Failed to get Glance endpoint "
                "from Keystone endpoint: %s\n" % (os_params['auth_uri'])
            )
            sys.exit(STATE_CRITICAL)

        parsed_url = urllib.parse.urlparse(endpoint)
        glance_host = parsed_url.hostname
        glance_port = int(parsed_url.port)

        # Verify that the port is reachable
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        result = sock.connect_ex((glance_host, glance_port))
        if result != 0:
            sys.stdout.write(
                "CRITICAL - cannot connect to glance server %s "
                "on port %s\n" % (glance_host, glance_port)
            )
            sys.exit(STATE_CRITICAL)

        (exit_code, msg) = check_api(endpoint, token, cert=cert)
        sys.stdout.write(msg)
        sys.exit(exit_code)

    except Exception as ex:  # pylint: disable=broad-except
        # All other exceptional conditions, we report as 'UNKNOWN' probe status
        sys.stdout.write(
            "UNKNOWN - Unexpected error while testing "
            "Glance API: %s\n" % (str(ex))
        )
        sys.exit(STATE_UNKNOWN)


if __name__ == '__main__':
    main()
