#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2017 CNRS and University of Strasbourg
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

import os
import sys

import argparse
import ConfigParser
import socket
import requests

from six.moves import urllib


def get_os_params(config_file):
    '''Return OpenStack parameters
    '''
    os_params = {'keystone': {}, 'glance': {}}
    keystone_params = {'username': None, 'password': None,
                       'project_name': None, 'user_domain_name': None,
                       'project_domain_name': None, 'auth_uri': None,
                       'cacert': None}
    glance_params = {'port': None, 'host': None}
    config_parser = ConfigParser.ConfigParser()
    config_parser.read(config_file)
    if (not config_parser.has_section('keystone_authtoken') or
            not config_parser.has_section('glance')):
        return os_params
    for param in keystone_params.keys():
        if config_parser.has_option('keystone_authtoken', param):
            os_params['keystone'][param] = config_parser.get('keystone_authtoken', param)
    for param in glance_params.keys():
        if config_parser.has_option('glance', param):
            os_params['glance'][param] = config_parser.get('glance', param)
    return os_params


def get_token(auth_uri, username, password, project_name, domain_name, cacert):
    url = auth_uri + '/auth/tokens'

    if not cacert:
        ca_check = False
    else:
        ca_check = cacert

    headers = {'Content-Type': 'application/json'}
    data = '''{
"auth": {
  "identity": {
    "methods": ["password"],
      "password": {
        "user": {
          "name": "%s",
          "domain": {"name": "%s"},
          "password": "%s"
        }
      }
    },
    "scope": {
      "project": {
        "name": "%s",
        "domain": { "name": "%s" }
      }
    }
  }
}''' % (username, domain_name, password, project_name, domain_name)
    req = requests.post(url, data, headers=headers, verify=ca_check)
    if req.status_code == 201 and 'X-Subject-Token' in req.headers:
        return req.headers['X-Subject-Token']
    return None

def check_api(host, port, token):
    headers = {'Content-Type': 'application/json', 'X-Auth-Token': token}
    url = 'http://' + host +':' + str(port) + '/v2/images'
    req = requests.get(url, headers=headers)
    exit_code = 2
    msg = 'CRITICAL - Failed to get the Glance image list'
    if req.status_code == 200:
        data = req.json()
        image_count = len(data['images'])
        exit_code = 0
        msg = "OK - Glance API successfully tested: %s images are available." % image_count
    return (exit_code, msg)

def main():
    parser = argparse.ArgumentParser(description="Check Glance API.",
                                     version="0.1")
    parser.add_argument('config_file', metavar='CONFIG_FILE', type=str,
                        help=('Configuration file'))
    args = parser.parse_args()
    config_file = args.config_file

    params = get_os_params(config_file)
    glance_host = params['glance']['host']
    glance_port = int(params['glance']['port'])
    try:
        # Verify that the port is reachable
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        result = sock.connect_ex((glance_host, glance_port))
        if result != 0:
            print("CRITICAL - cannot connect to glance server %s "
                  "on port %s" % (glance_host, glance_port))
            sys.exit(2)

        # Check that the API is working
        token = get_token(params['keystone']['auth_uri'],
                          params['keystone']['username'],
                          params['keystone']['password'],
                          params['keystone']['project_name'],
                          params['keystone']['user_domain_name'],
                          params['keystone']['cacert'])

        if not token:
            print("CRITICAL - Failed to get token from Keystone"
                  " server: %s" % (auth_uri))
            sys.exit(2)

        (exit_code, msg) = check_api(glance_host, glance_port, token)
        print(msg)
        sys.exit(exit_code)

    except Exception as ex:
        print("UNKNOWN - Unexpected error while testing "
              "Keystone API: %s" % (str(ex)))
        sys.exit(3)

if __name__ == '__main__':
    main()
