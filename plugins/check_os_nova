#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2017 CNRS and University of Strasbourg
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

"""
Command-line interface to check the Nova API.
"""

import sys

import argparse
import ConfigParser
import socket
import requests

from six.moves import urllib

__version__ = "0.2"

STATE_OK = 0
STATE_WARNING = 1
STATE_CRITICAL = 2
STATE_UNKNOWN = 3


def get_os_params(config_file):
    '''Return OpenStack parameters
    '''
    os_params = {'username': None, 'password': None,
                 'project_name': None, 'user_domain_name': None,
                 'project_domain_name': None, 'auth_uri': None,
                 'cacert': None}
    config_parser = ConfigParser.ConfigParser()
    config_parser.read(config_file)
    if not config_parser.has_section('keystone_authtoken'):
        return os_params
    for param in os_params.keys():
        if config_parser.has_option('keystone_authtoken', param):
            os_params[param] = config_parser.get('keystone_authtoken', param)
    return os_params


def get_conn_params(os_params):
    '''Return Keystone token and API's endpoint
    '''
    url = os_params['auth_uri'] + '/auth/tokens'
    token = None
    endpoint = None

    if not os_params['cacert']:
        ca_check = False
    else:
        ca_check = os_params['cacert']

    headers = {'Content-Type': 'application/json'}
    data = '''{
"auth": {
  "identity": {
    "methods": ["password"],
      "password": {
        "user": {
          "name": "%(username)s",
          "domain": {"name": "%(user_domain_name)s"},
          "password": "%(password)s"
        }
      }
    },
    "scope": {
      "project": {
        "name": "%(project_name)s",
        "domain": { "name": "%(user_domain_name)s" }
      }
    }
  }
}''' % (os_params)

    req = requests.post(url, data, headers=headers, verify=ca_check)
    if req.status_code == 201 and 'X-Subject-Token' in req.headers:
        token = req.headers['X-Subject-Token']
        res = req.json()
        for endpoints in res['token']['catalog']:
            if endpoints['name'] == 'nova':
                for endpoint_iface in endpoints['endpoints']:
                    if endpoint_iface['interface'] == 'public':
                        endpoint = endpoint_iface['url']
                        break
                break

    return (token, endpoint)


def check_api(endpoint, token):
    '''Check the Nova API
    '''
    headers = {'Content-Type': 'application/json', 'X-Auth-Token': token}
    url = endpoint + '/servers/detail'
    req = requests.get(url, headers=headers)
    exit_code = STATE_CRITICAL
    msg = 'CRITICAL - Failed to get the Nova server list'

    if req.status_code == 200:
        data = req.json()
        server_count = len(data['servers'])
        exit_code = STATE_OK
        msg = ("OK - Nova API successfully tested: %i"
               " servers are available." % server_count)
    return (exit_code, msg)


def main():
    '''Main loop
    '''
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-v', '--version', action='version',
                        version='%(prog)s  ' + __version__)
    parser.add_argument('config_file', metavar='CONFIG_FILE', type=str,
                        help=('Configuration file'))
    args = parser.parse_args()
    config_file = args.config_file

    os_params = get_os_params(config_file)
    try:
        # Check that the API is working
        token, endpoint = get_conn_params(os_params)

        if not token:
            print("CRITICAL - Failed to get token from Keystone"
                  " endpoint: %s" % (os_params['auth_uri']))
            sys.exit(STATE_CRITICAL)

        if not endpoint:
            print("CRITICAL - Failed to get Nova endpoint"
                  " from Keystone endpoint: %s" % (os_params['auth_uri']))
            sys.exit(STATE_CRITICAL)

        parsed_url = urllib.parse.urlparse(endpoint)
        nova_host = parsed_url.hostname
        nova_port = int(parsed_url.port)

        # Verify that the port is reachable
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        result = sock.connect_ex((nova_host, nova_port))
        if result != 0:
            print("CRITICAL - cannot connect to nova server %s "
                  "on port %s" % (nova_host, nova_port))
            sys.exit(STATE_CRITICAL)

        (exit_code, msg) = check_api(endpoint, token)
        print(msg)
        sys.exit(exit_code)

    except Exception as ex:  # pylint: disable=broad-except
        # All other exceptional conditions, we report as 'UNKNOWN' probe status
        print("UNKNOWN - Unexpected error while testing "
              "Nova API: %s" % (str(ex)))
        sys.exit(STATE_UNKNOWN)

if __name__ == '__main__':
    main()
